--INITAL DATA PULL
DROP TABLE METEORITE_DATA_NEW;
CREATE TABLE METEORITE_DATA_NEW AS(
SELECT A.NAME
, A.ID
, A.NAMETYPE
, A.MASS
--BUCKET BY MASS SIZE
, CASE WHEN MASS < 100 THEN '<100g'
	WHEN MASS BETWEEN 100 AND 500 THEN '100-500g'
	WHEN MASS BETWEEN 500 AND 1000 THEN '500-1,000g'
	WHEN MASS BETWEEN 1000 AND 5000 THEN '1,000-5,000g'
	WHEN MASS BETWEEN 5000 AND 10000 THEN '5,000-10,000g'
	WHEN MASS BETWEEN 10000 AND 50000 THEN '10,000-50,000g'
	WHEN MASS BETWEEN 50000 AND 100000 THEN '50,000-100,000g'
	WHEN MASS > 100000 THEN '100,000g+'
	END AS MASS_GROUP
, A.FALL
, A.YEAR
--BUCKET BY CENTURY
, CASE WHEN YEAR < 1800 THEN '<1800'
	WHEN YEAR BETWEEN 1800 AND 1900 THEN '1800'
	WHEN YEAR BETWEEN 1900 AND 2000 THEN '1900'
	WHEN YEAR > 2000 THEN '2000'
	END AS CENTURY
, A.RECLAT
, A.RECLONG
, A.GEOLOCATION
--CREATE COLUMN WITH HEMISPHERE FLAG
, CASE WHEN RECLAT < 0 THEN 'SOUTHERN'
	WHEN RECLAT >= 0 THEN 'NORTHERN'
	END AS HEMISPHERE
, A.RECCLASS
, CASE WHEN (RECCLASS LIKE '%Chondrite%'
			 OR RECCLASS LIKE 'C'
			 OR RECCLASS LIKE 'OC%'
			 OR RECCLASS LIKE 'C1%'
			 OR RECCLASS LIKE 'C2%'
			 OR RECCLASS LIKE 'C3%'
			 OR RECCLASS LIKE 'C4%'
			 OR RECCLASS LIKE 'C5%'
			 OR RECCLASS LIKE 'C6%'
			 OR RECCLASS LIKE 'CB%'
			 OR RECCLASS LIKE 'CH'
			 OR RECCLASS LIKE 'CH/%'
			 OR RECCLASS LIKE 'CH3%'
			 OR RECCLASS LIKE 'CK%'
			 OR RECCLASS LIKE 'CM%'
			 OR RECCLASS LIKE 'CR%'
			 OR RECCLASS LIKE 'CV%'
			 OR RECCLASS LIKE 'CO%'
			 OR RECCLASS LIKE 'CI%'
			 OR RECCLASS LIKE 'H%' 
			 OR RECCLASS LIKE 'L%'
			 OR RECCLASS LIKE 'R%'
			 OR RECCLASS LIKE 'K%'
			 OR RECCLASS LIKE 'E'
			 OR RECCLASS LIKE 'E-%'
			 OR RECCLASS LIKE 'E3%'
			 OR RECCLASS LIKE 'E4%'
			 OR RECCLASS LIKE 'E5%'
			 OR RECCLASS LIKE 'E6%'
			 OR RECCLASS LIKE 'EH%'
			 OR RECCLASS LIKE 'EL%'
			) THEN 'CHONDRITE'
		WHEN (RECCLASS LIKE '%Achondrite%'
			  OR RECCLASS LIKE '%Iodranite%'
			  OR RECCLASS LIKE '%Acapulcoite%'
			  OR RECCLASS LIKE '%Winonaite%'
			  OR RECCLASS LIKE '%Martian%'
			  OR RECCLASS LIKE '%Sherottie%'
			  OR RECCLASS LIKE '%Nakhlite%'
			  OR RECCLASS LIKE '%Chassignite%'
			  OR RECCLASS LIKE '%ALH%'
			  OR RECCLASS LIKE '%Aubrite%'
			  OR RECCLASS LIKE '%Ureilite%'
			  OR RECCLASS LIKE '%HED%'
			  OR RECCLASS LIKE '%Eucrite%'
			  OR RECCLASS LIKE '%Diogenite%'
			  OR RECCLASS LIKE '%Howardite%'
			  OR RECCLASS LIKE '%Angrite%'
			  OR RECCLASS LIKE '%Brachinite%'
			  OR RECCLASS LIKE '%Lunar%'
			  OR RECCLASS LIKE '%Feldspathic%'
			  OR RECCLASS LIKE '%Basaltic%'
			  OR RECCLASS LIKE '%Polymict%'
			 ) THEN 'ACHONDRITE'
		WHEN (RECCLASS LIKE '%Iron%'
			  OR RECCLASS LIKE '%IAB%'
			  OR RECCLASS LIKE '%IVAB%'
			) THEN 'IRON METEORITE'
		WHEN (RECCLASS LIKE '%Pallasite%'
			  OR RECCLASS LIKE '%Mesosiderite%'
			) THEN 'STONY-IRON METEORITE'
		WHEN (RECCLASS LIKE '%Unknown%'
			  OR RECCLASS LIKE '%uncl%'
			  ) THEN 'UNKNOWN'
		ELSE 'OTHER'
		END AS METEORITE_CLASSIFICATION
FROM METEORITE3 A
--WHERE STATEMENT FOR DATA CLEANSE
WHERE YEAR <= 2023
);

--CHECK
SELECT * FROM METEORITE_DATA_NEW;

--------------------------------------------------

-----------DATA ROLLUPS FOR ANALYSIS-----------

-----------FELL VS FOUND-----------
SELECT 
	A.FALL,
	COUNT(A.NAME) AS COUNT_TOTAL,
	MAX(A.MASS) AS MAX_MASS,
	MIN(A.MASS) AS MIN_MASS,
	ROUND(AVG(A.MASS),2) AS AVG_MASS,
	MAX(A.YEAR) AS MAX_YEAR,
	MIN(A.YEAR) AS MIN_YEAR,
	ROUND(AVG(A.YEAR),2) AS AVG_YEAR
FROM METEORITE_DATA_NEW A
GROUP BY A.FALL
;

-----------LOCATION VIEWS-----------

--HEMISPHERE
SELECT A.HEMISPHERE,
	COUNT(A.NAME) AS COUNT_TOTAL,
	MAX(A.MASS) AS MAX_MASS,
	MIN(A.MASS) AS MIN_MASS,
	ROUND(AVG(A.MASS),2) AS AVG_MASS,
	MAX(A.YEAR) AS MAX_YEAR,
	MIN(A.YEAR) AS MIN_YEAR,
	ROUND(AVG(A.YEAR),2) AS AVG_YEAR
FROM METEORITE_DATA_NEW A
WHERE A.HEMISPHERE IS NOT NULL
GROUP BY A.HEMISPHERE
;

--LAT VS LON FELL
SELECT A.GEOLOCATION,
	COUNT(A.NAME) AS COUNT_TOTAL,
	MAX(A.MASS) AS MAX_MASS,
	MIN(A.MASS) AS MIN_MASS,
	ROUND(AVG(A.MASS),2) AS AVG_MASS,
	MAX(A.YEAR) AS MAX_YEAR,
	MIN(A.YEAR) AS MIN_YEAR,
	ROUND(AVG(A.YEAR),2) AS AVG_YEAR
FROM METEORITE_DATA_NEW A
WHERE A.HEMISPHERE IS NOT NULL
AND FALL = 'Fell'
GROUP BY A.GEOLOCATION
ORDER BY COUNT(A.NAME) DESC
;

--LAT VS LON FOUND
SELECT A.GEOLOCATION,
	COUNT(A.NAME) AS COUNT_TOTAL,
	MAX(A.MASS) AS MAX_MASS,
	MIN(A.MASS) AS MIN_MASS,
	ROUND(AVG(A.MASS),2) AS AVG_MASS,
	MAX(A.YEAR) AS MAX_YEAR,
	MIN(A.YEAR) AS MIN_YEAR,
	ROUND(AVG(A.YEAR),2) AS AVG_YEAR
FROM METEORITE_DATA_NEW A
WHERE A.HEMISPHERE IS NOT NULL
AND FALL = 'Found'
GROUP BY A.GEOLOCATION
ORDER BY COUNT(A.NAME) DESC
;

-----------DATE VIEWS-----------

--CENTURY
SELECT Z.CENTURY,
	COUNT(Z.NAME) AS COUNT_TOTAL,
	MAX(Z.MASS) AS MAX_MASS,
	MIN(Z.MASS) AS MIN_MASS,
	ROUND(AVG(Z.MASS),2) AS AVG_MASS,
	MAX(Z.YEAR) AS MAX_YEAR,
	MIN(Z.YEAR) AS MIN_YEAR,
	ROUND(AVG(Z.YEAR),2) AS AVG_YEAR
FROM (
		SELECT * 
		, CASE WHEN CENTURY = '<1800' THEN 1
			WHEN CENTURY = '1800' THEN 2
			WHEN CENTURY = '1900' THEN 3
			WHEN CENTURY = '2000' THEN 4
			END AS MANUAL_ORDER
		FROM METEORITE_DATA_NEW DATA
	) Z
GROUP BY Z.CENTURY, Z.MANUAL_ORDER
ORDER BY Z.MANUAL_ORDER ASC
;

--CENTURY BY FALL
SELECT Z.CENTURY,
	Z.FALL,
	COUNT(Z.NAME) AS COUNT_TOTAL,
	MAX(Z.MASS) AS MAX_MASS,
	MIN(Z.MASS) AS MIN_MASS,
	ROUND(AVG(Z.MASS),2) AS AVG_MASS,
	MAX(Z.YEAR) AS MAX_YEAR,
	MIN(Z.YEAR) AS MIN_YEAR,
	ROUND(AVG(Z.YEAR),2) AS AVG_YEAR
FROM (
		SELECT * 
		, CASE WHEN CENTURY = '<1800' THEN 1
			WHEN CENTURY = '1800' THEN 2
			WHEN CENTURY = '1900' THEN 3
			WHEN CENTURY = '2000' THEN 4
			END AS MANUAL_ORDER
		FROM METEORITE_DATA_NEW DATA
	) Z
GROUP BY Z.CENTURY, Z.FALL, Z.MANUAL_ORDER
ORDER BY Z.MANUAL_ORDER ASC
;

--YEAR
SELECT A.YEAR,
	COUNT(A.NAME) AS COUNT_TOTAL,
	MAX(A.MASS) AS MAX_MASS,
	MIN(A.MASS) AS MIN_MASS,
	ROUND(AVG(A.MASS),2) AS AVG_MASS,
	MAX(A.YEAR) AS MAX_YEAR,
	MIN(A.YEAR) AS MIN_YEAR,
	ROUND(AVG(A.YEAR),2) AS AVG_YEAR
FROM METEORITE_DATA_NEW A
GROUP BY A.YEAR
ORDER BY COUNT(A.NAME) DESC
;

-----------METEORITE VIEWS-----------

--METEORITE CLASSIFICATION
SELECT A.METEORITE_CLASSIFICATION,
	COUNT(A.NAME) AS COUNT_TOTAL,
	MAX(A.MASS) AS MAX_MASS,
	MIN(A.MASS) AS MIN_MASS,
	ROUND(AVG(A.MASS),2) AS AVG_MASS,
	MAX(A.YEAR) AS MAX_YEAR,
	MIN(A.YEAR) AS MIN_YEAR,
	ROUND(AVG(A.YEAR),2) AS AVG_YEAR
FROM METEORITE_DATA_NEW A
GROUP BY A.METEORITE_CLASSIFICATION
ORDER BY A.METEORITE_CLASSIFICATION
;
